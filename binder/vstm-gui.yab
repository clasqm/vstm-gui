#!yab
################################
############# Prologue #############
################################

//Yabadabbadoo notification
########DO NOT RENAME THIS FILE!########
//Yabadabbadoo needs it to function.
 
##Fill in these fields with your own particulars.
##The variables will be used in the About Box and in naming the program.
 
ProgramName$ = "vstm, the Very Simple Task Manager"
AuthorName$ = "vstm by Frank Villaro-Dixon <vstm@vi-di.fr>, and vstm-GUI by Michel Clasquin-Johnson <clasqm@gmail.com>"
ProgramVersion$ = "v0.1"
ProgramBriefDescription$ = "A simple TODO List. create TODOS, do them, delete them, that's all. No \"pending\", no snooze button. Just list the things you need to do, then get them done."
ProgramLicense$ = "vstm is Beerware"
ProgramAcknowledgements$ ="With thanks to Frank Villaro-Dixon."
 
//*************************
//*****Global Variables****
//*************************
 
## Technically, yab does not require you to declare global variables,
##It just is a really, really good idea to do it anyway.
// set DEBUG = 1 to print out all messages on the console
DEBUG = 1
//change this to DEBUG = 0 when you are ready to bind the program for distribution

DataFile$ = "/boot/home/.vstmDB"
TempDir$ = system$("finddir B_COMMON_TEMP_DIRECTORY")
TempDir$ = left$(TempDir$,len(TempDir$)-1) //strip trailing newline
TempFile1$ = TempDir$ + "/" + "vstm1"
TempFile2$ = TempDir$ + "/" + "vstm2"
SortMode$ = "number"
SortDirection$ = "az"
 
 
##########################
######Preliminary Commands#####
##########################

## Commands to run before the Main Loop come here.
## e.g. setting up a window with a menu.
 
 system("touch /boot/home/.vstmDB")
 
OpenWindow()

 
 
 
#######End of Prologue#######


//Yabadabbadoo notification
########DO NOT RENAME THIS FILE!########
//Yabadabbadoo needs it to function.

//Main Message Loop
dim msg$(1)
while(not leavingLoop)
	nCommands = token(message$, msg$(), "|")
	for everyCommand = 1 to nCommands
		if(DEBUG and msg$(everyCommand)<>"") print msg$(everyCommand)
		switch(msg$(everyCommand))
			case "_QuitRequested":
			case "MainWindow:_QuitRequested":
			case "MainWindow:File:Quit":
				leavingLoop = true
				break
			case "MainWindow:File:Edit vstm DB directly"
				GUIonoff(0)
				system("/boot/system/apps/StyledEdit /boot/home/.vstmDB")
				columnbox clear "TheData"
				CheckSortMode(0)
				GUIonoff(1)
				break
			case "MainWindow:vstm:New TODO"
			case "NewButton"
				MakeInputWindow("","",1)
				break
			case "MainWindow:vstm:Delete TODO"
			case "DeleteButton"
				GUIonoff(0)
				if left$(system$("alert \"Really delete this TODO?\" Yes No"),1) = "Y" then
					system("vstm " + GetMyData$(1, columnbox get "TheData"))
					columnbox remove "TheData", columnbox count "TheData"
					CheckSortMode(0)
				endif
				GUIonoff(1)
				break
			case "MainWindow:vstm:Sort by ...:Urgency"
			case "SortByUrgencyButton"
				SortMode$ = "urgency"
				CheckSortMode(1)
				break
			case "MainWindow:vstm:Sort by ...:Entry order"
			case "SortByNumberButton"
				SortMode$ = "number"
				CheckSortMode(1)
				break
			case "MainWindow:vstm:Sort by ...:Description"
			case "SortByDescriptionButton"
				SortMode$ = "todo"
				CheckSortMode(1)
				break
			case "MainWindow:vstm:Edit TODO"
			case "EditButton"
				EditItem()
				break
			case "MainWindow:vstm:View TODOs in Terminal"
				wait 0.5
				system("Terminal vstm &")
				break
			case "NewOKButton"
				system("vstm " + FetchNewData$())
				CheckSortMode(0)
				window close "InputWindow"
				GUIonoff(1)
				break
			case "EditOKButton"
				system("vstm " + GetMyData$(1, columnbox get "TheData"))
				system("vstm " + FetchNewData$())
				CheckSortMode(0)
				window close "InputWindow"
				GUIonoff(1)
				break
			case "MainWindow:Help:About":
				Alert ProgramName$ + " " + ProgramVersion$ + "\n" + AuthorName$ +"\n\n" + ProgramBriefDescription$ + "\n" + ProgramLicense$ + "\n" + ProgramAcknowledgements$, "OK", "none"
			case "InputCancelButton"
				window close "InputWindow"
				GUIonoff(1)
				break
			default:
				break
		end switch
	next everyCommand
wend

CloseWindow()

end

sub CheckSortMode(switchme)
	local DoThis$, key$
	GUIonoff(0)
	if switchme = 1 then
		if SortDirection$ = "az" then
			SortDirection$ = "za"
		else
			SortDirection$ = "az"
		endif
	endif
	if SortMode$ = "number" then
		if SortDirection$ = "az" key$ = "1"
		if SortDirection$ = "za" key$ = "1 -r"
	elseif SortMode$ = "urgency" then
		if SortDirection$ = "az" key$ = "2 -r"
		if SortDirection$ = "za" key$ = "2"
	elseif SortMode$ = "todo" then
		if SortDirection$ = "az" key$ = "3"
		if SortDirection$ = "za" key$ = "3 -r"
	endif
	DoThis$= "vstm-noansi > " + TempFile1$
	system(DoThis$)
	DoThis$= "sort --key=" + key$ + " " + TempFile1$ + " > " + TempFile2$
	system(DoThis$)
	Refresh(TempFile2$)
	GUIonoff(1)
	columnbox select "TheData", 1
end sub

sub CloseWindow()
	//Close down the main window
		open "/boot/home/config/settings/vstm.cfg" for writing as #1
	print #1 window get "MainWindow", "position-x" 
	print #1 window get "MainWindow", "position-y" 
	close #1
	window close "MainWindow"
end sub

sub EditItem()
	local urgency$, todotext$
	urgency$ = GetMyData$(2, columnbox get "TheData")
	todotext$ = GetMyData$(3, columnbox get "TheData")
	MakeInputWindow(urgency$, todotext$,0)
end sub

sub FetchNewData$()
	local totalstring$
	totalstring$ = "@" + str$(slider get "UrgencySlider")
	totalstring$ = totalstring$  + " " 
	totalstring$ = totalstring$  + TextControl get$ "TODONewText"
	return totalstring$
end sub

sub GetMyData$(kolom, ry)
	local MyData$
	MyData$ = ColumnBox get$ "TheData", kolom, ry
	return MyData$
end sub

sub GUIonoff(gui)
	local gui$
	if gui = 1 gui$ = "enable"
	if gui = 0 gui$ = "disable"
	menu set "File", "Edit vstm DB directly", gui$, "MainWindow"
	menu set "File", "Quit", gui$, "MainWindow"
	menu set "vstm", "New TODO", gui$, "MainWindow"
	menu set "vstm", "Delete TODO", gui$, "MainWindow"
	menu set "vstm", "Edit TODO", gui$, "MainWindow"
	submenu set "vstm", "Sort by ...", "Entry number", gui$, "MainWindow"
	submenu set "vstm", "Sort by ...", "Urgency", gui$, "MainWindow"
	submenu set "vstm", "Sort by ...", "Description", gui$, "MainWindow"
	menu set "vstm", "View TODOs in Terminal", gui$, "MainWindow"
	menu set "Help", "About", gui$, "MainWindow"
	option set "SortByNumberButton", "enabled", gui
	option set "SortByUrgencyButton", "enabled", gui
	option set "SortByDescriptionButton", "enabled", gui
	option set "EditButton", "enabled", gui
	option set "DeleteButton", "enabled", gui
	option set "NewButton", "enabled", gui
end sub

sub MakeButtonBar(Xwidth)
	Xwidth = Xwidth -2
	layout "left", "MainWindow"
	button 2,20 to 50, 42, "SortByNumberButton", "↓#↑", "MainWindow"
	button 52,20 to 120, 42, "SortByUrgencyButton", "↓ !!! ↑", "MainWindow"
	button 122,20 to 220, 42, "SortByDescriptionButton", "↓ a-z ↑", "MainWindow"
	button Xwidth - 100,20 to Xwidth-68,42, "EditButton", "⬊", "MainWindow"
	button Xwidth - 66,20 to Xwidth-34,42, "DeleteButton", "✖", "MainWindow"
	button Xwidth - 32,20 to Xwidth,42, "NewButton", "✚", "MainWindow"
	tooltip "SortByUrgencyButton", "Sort by urgency. Click\nagain to toggle sort order."
	tooltip "SortByNumberButton", "Sort by entry order. Click\nagain to toggle sort order."
	tooltip "SortByDescriptionButton", "Sort by TODO Text. Click\nagain to toggle sort order."
	tooltip "EditButton", "Edit this TODO"
	tooltip "DeleteButton", "Delete this TODO"
	tooltip "NewButton", "Add a new TODO"
	layout "standard", "MainWindow"
end sub

sub MakeInputWindow(urgency$, todotext$,newentry)
	local Xwidth, Yheight, MWx, MWy
	GUIonoff(0)
	Xwidth = (window get "MainWindow", "width")
	Yheight = (window get "MainWindow", "heigth")
	MWx = (window get "MainWindow", "position-x") + 50
	MWy = (window get "MainWindow", "position-y") + 100
	window open MWx, MWy to MWx + Xwidth -100, MWy + 100, "InputWindow", ""
	Window set "InputWindow", "look", "modal"
	Window set "InputWindow", "feel", "modal-app"
	//Window set "InputWindow", "flags", "Not-Resizable"
	//switch size variables to new window
	Xwidth = (window get "InputWindow", "width")
	Yheight = (window get "InputWindow", "height")
	Textcontrol 10,10 to Xwidth -10, 35, "TODONewText", "Todo:", todotext$, "InputWindow"
	text 10,43, "sometext","Urgency:", "InputWindow"
	slider 65,40 to Xwidth -10, 65, "UrgencySlider", "", 0,100, "block, horizontal", "InputWindow"
	slider label "UrgencySlider", "0", "100"
	slider set "UrgencySlider", "both",11
	if val(urgency$)>100 urgency$ = "100"
	if val(urgency$)<0 urgency$ = "0"
	if urgency$ = "" urgency$ = "50"
	slider set "UrgencySlider", val(urgency$)
	if newentry button Xwidth/2-105, Yheight-27 to Xwidth/2-5, Yheight-5, "NewOKButton", "OK", "InputWindow"
	if (not newentry) button Xwidth/2-105, Yheight-27 to Xwidth/2-5, Yheight-5, "EditOKButton", "OK", "InputWindow"
	button Xwidth/2+5, Yheight-27 to Xwidth/2+105, Yheight-5, "InputCancelButton", "Cancel", "InputWindow"
end sub

sub MakeMenu()
	//Create menu in MainWindow
	menu "File", "Edit vstm DB directly", "", "MainWindow"
	menu "File", "Quit", "Q", "MainWindow"
	menu "vstm", "New TODO", "N", "MainWindow"
	menu "vstm", "Delete TODO", "D", "MainWindow"
	menu "vstm", "Edit TODO", "E", "MainWindow"
	submenu "vstm", "Sort by ...", "Entry number", "N", "MainWindow"
	submenu "vstm", "Sort by ...", "Urgency", "U", "MainWindow"
	submenu "vstm", "Sort by ...", "Description", "D", "MainWindow"
	menu "vstm", "View TODOs in Terminal", "V", "MainWindow"
	menu "Help", "About", "", "MainWindow"
	submenu set "vstm", "Sort by ...", 1, "MainWindow"
	submenu set "vstm", "Sort by ...", "Entry number", "mark", "MainWindow"
end sub

sub OpenWindow()
	local StartX,StartY,EndX, EndY, Xwidth,Yheight
	if (not open(1,"/boot/home/config/settings/vstm.cfg")) then	
		StartX = 79
		StartY = 87
	else
		Line input #1 StartX
		Line input #1 StartY
	endif
	close #1
	Xwidth = 500
	Yheight = 400
	EndX = StartX + Xwidth
	EndY = StartY + Yheight 
	//Setup the main window here
	window open StartX,StartY to EndX,EndY, "MainWindow", "vstm-GUI"
	Window set "MainWindow", "flags", "Not-V-resizable"
	Window set "MainWindow", "minimumto", Xwidth, Yheight
	MakeMenu()
	MakeButtonBar(Xwidth)
	columnbox 1,45 to Xwidth,Yheight, "TheData", 1, "Resizable", "MainWindow"
	columnbox column "TheData", "#", 1,60,40, 50, "align-center" 
	columnbox column "TheData", "Urgency", 2,85,50, 70, "align-center" 
	columnbox column "TheData", "   Description", 3,9999,200, 362, "align-left" 
	columnbox color "TheData", "text", 50,50,50
	columnbox color "TheData", "selection-text", 255,0,0
	columnbox color "TheData", "non-focus-selection", 0,0,0
	CheckSortMode()
	GUIonoff(1)
	//listbox 
end sub

sub Refresh(FileName$)
	local DoThis$, lines$, lines, tokens, w$(1), x$(1)
	DoThis$ = "wc -l " + FileName$
	lines$ = system$(DoThis$)
	tokens = token(lines$, w$())
	lines = val(w$(1))
	//Columnbox clear "TheData"
	open FileName$ for reading as #1
	for f = 1 to lines
		line input #1 lines$ //reusing a variable here 
		tokens = token(lines$, x$())
		columnbox add "TheData", 1, f,22, x$(1)
		columnbox add "TheData", 2, f,22, x$(2)
		lines$ = ""
		for n = 3 to tokens
			lines$ = lines$ + x$(n) + " "
		next n
		columnbox add "TheData", 3, f, 22, lines$
	next f
	close #1
end sub

########################################
###DATA statements, if any, come here###
########################################


